#! /usr/bin/env {{cookiecutter.python_command}}
import sys
import os
import textwrap
import argparse
from pathlib import Path

all_assemblies = {}

def get_assemblies():
    for aname in ['assemblies', 'others']:
        assemblies = []
        filename=f'{aname}.txt'
        with open(filename, "r") as f:
            s=f.read()
        for file in s.split('\n'):
            fs = file.strip();
            if len(fs) > 0:
                assemblies += [fs]
        all_assemblies[aname] = assemblies

def find_assembly(name, kind):
    for akind in all_assemblies.keys():
        if akind == kind:
            continue
        if name in all_assemblies.get(akind, []):
            print(f'Warning: assembly {name} is in both of {akind} and {kind}')
            return True
    return False

def add_assembly(name, args):
    kind = args.kind
    if find_assembly(name, kind) and not args.force:
       sys.exit(100)
    print(f'Adding assembly name {name}.')
    assemblies = all_assemblies.get(kind, [])
    if not name in assemblies:
        assemblies += [name]
        all_assemblies[kind] = assemblies

def put_assemblies():
    for aname in all_assemblies.keys():
        filename = f'{aname}.txt'
        assemblies = all_assemblies[aname]
        with open(filename, "w") as f:
            for name in assemblies:
                f.write(name + '\n')

def add_assembly_function(name, args):
    filepath = Path("src") / Path(f'{name}.scad');
    if filepath.exists() and not args.force:
        print(f'Fatal error: will not overwrite scad file {str(filepath)}')
        return False
    with open(f"src/{name}.scad", "w") as f:
        if args.griscad:
            print('include <GRISCAD/assemblies.scad>', file=f)
        if args.main:
            if len(args.main) < 5 or args.main[-5:] != '.scad':
                print(f'include <{args.main}.scad>', file=f)
            else:
                print(f'include <{args.main}>', file=f)
        if args.griscad:
            print('\nassembly(debug=false) {', file=f)
            print(f'    {name}();', file=f)
            print('}\n', file=f)
        else:
            print(f'\n{name}();', file=f);
    return True

def make_assembly(name, args):
    add_assembly(name, args)
    add_assembly_function(name, args)

def main(argv):
    parser = argparse.ArgumentParser \
           (prog='ProgramName',
            formatter_class=argparse.RawDescriptionHelpFormatter,
            epilog=textwrap.dedent('''\
            Help:
            This program adds an assembly. Default arguments
            can be added in the file .make_assembly.conf in the
            root of the project. See that file for details.
         '''))
    parser.add_argument("-a", "--assembly", 
                        action='store_const', 
                        const='assemblies',
                        dest='kind',
                        default='assemblies', 
                        help="Make exported assemblies. (default).")
    parser.add_argument("-o", "--other", 
                        action='store_const', 
                        const='others',
                        dest='kind',
                        help="Make ancillary ssemblies.")
    parser.add_argument("-m", "--main",
                        help='OpenScad source which defines the assembly objects.')
    parser.add_argument("-g", "--griscad", 
                        action='store_true',
                        default=False,
                        help="Use GRISCAD assemblies.")
    parser.add_argument("-f", "--force",
                        action='store_true',
                        default=False,
                        help="Overwrite existing .scad files.")
    parser.add_argument("names", nargs='+', help="names of the assemblies to add.")
    args = parser.parse_args(argv)
    get_assemblies()
    for name in args.names:
        make_assembly(name, args)
    put_assemblies()
    sys.exit(0)

def find_root():
    # Keep going up until we hit the root.
    # At the root ./.. == .
    last_dotdir = None
    dotdir = Path(".")
    while dotdir != last_dotdir:
        p = dotdir / Path(".root")
        if p.exists:
           return os.path.abspath(dotdir)
        last_dotdir = dotdir
        dotdir = Path("..")
    return None

def get_default_args():
    root = find_root()
    if not root:
        print('Cannot find the root directory.', file=sys.err)
        sys.exit(100)
    confile = root / Path(".make_assembly.conf")
    if confile.exists():
       with open(confile, "r") as cf:
            lines = cf.read().split("\n")
            args = [t for t in lines if len(t) > 0 and not t.startswith('#')]
            return args
    return []

if __name__ == '__main__':
    all_args = get_default_args()
    all_args += sys.argv[1:]
    main(all_args)
